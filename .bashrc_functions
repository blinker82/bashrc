function append_string()
{
    for filename in $(find . -type f -regex ".*\.\(c\|h\)"); do
       echo $filename
       echo sed -i "s/$1/$1$2/g" $filename
       sed -i "s/$1/$1$2/g" $filename
    done
}
function gvim_init_remote()
{
    gvim  --servername $1
}

function gvim_open_remote()
{
    gvim  --servername $1 --remote-tab-silent $2
}

function gvim_open_remote_vertical_split()
{
    gvim  -O --servername $1 --remote-silent $2 $3
}
function gvimr_GVIM_func()
{
   gvim_open_remote GVIM $1
}

function gvimr_init()
{
    export thiswindow=$(now)
    gvim_init_remote $thiswindow 
}

function gvimr()
{
    gvim_open_remote $thiswindow $1
}

function gvimrv()
{
    gvim_open_remote_vertical_split $thiswindow $1 $2
}
#plugin aliases
#alias gvimr_init='gvim_init_remote GVIM'
#alias gvimr='gvim_open_remote GVIM'
#alias gvimr_init1='gvim_init_remote GVIM1'
#alias gvimr1='gvim_open_remote GVIM1'
alias tag='echo "starting ctags ...";/usr/bin/ctags -R * ;echo "ctags done";echo "starting gtags ...";gtags;echo "gtags done"'

#bash function aliases
alias oft='openfile "gvimr_GVIM_func"' 
alias of='openfile vim'
alias ofr='openfile_gvimr'
alias ofg='openfile_godir'
alias fif='findinfile "-i -n"'
alias fife='findinfile_ext "-i -n"'
alias fifg='findinfile'
alias fifw='findinfile "-i -n -w"'
alias fifbase='findinfilebase'
alias archivenow='create_archive_tar_gz'

#GIT
alias git_oneline='git log --pretty=oneline --decorate'
alias git_pretty='git log --pretty=format:'"'"'%C(yellow)%h%Cred%d%Creset - %C(cyan)%an %Creset: %s %Cgreen(%cr)'"'"
alias git_graph='git log --graph --full-history --all --pretty=format:"%h%x09%d%x20%s"'
alias git_diff='git difftool --tool="bc3"'
#P4 Alias
alias p4init='export P4CONFIG=.p4config'
function countdown
{
        local OLD_IFS="${IFS}"
        IFS=":"
        local ARR=( $1 )
        local SECONDS=$((  (ARR[0] * 60 * 60) + (ARR[1] * 60) + ARR[2]  ))
        local START=$(date +%s)
        local END=$((START + SECONDS))
        local CUR=$START

        while [[ $CUR -lt $END ]]
        do
                CUR=$(date +%s)
                LEFT=$((END-CUR))

                printf "\r%02d:%02d:%02d" \
                        $((LEFT/3600)) $(( (LEFT/60)%60)) $((LEFT%60))

                sleep 1
        done
        IFS="${OLD_IFS}"
        echo "        "
}

function cmthis()
{
    if [[ "qnx_ap" == $(basename $(pwd)) ]]
    then
        echo "Are you sure you want to clean the whole build( y/n ) ?"
        read  -n 1 answer
        if [[ "$answer" == "n" ]]
        then
            echo "exiting"
            return 
        elif [[ "$answer" == "y" ]]
        then
            printf "\n"
            printf "STILL CAN CANCEL !!! - 10 seconds countdown \n"
            countdown "00:00:10"
            echo "cleaning and making build"
        else
            echo "invalid response"
        fi
    fi
    make clean
    make install
}
function p4_add()
{
    find $1  -type f ! -name '*\.so*' ! -name '*\a' ! -name '*\.pinfo' ! -name '*\.o' | p4 -x - add
}
function listfiles()
{
    echo "find $1  -type f ! -name '*\.so*' ! -name '*\a' ! -name '*\.pinfo' ! -name '*\.o' ! -name '*\.map'"
    find $1  -type f ! -name '*\.so*' ! -name '*\a' ! -name '*\.pinfo' ! -name '*\.o' ! -name '*\.map'
}
function find_dir_in_path()
{
    local temp=$(echo $1 | grep -i $2)
    if [ -n "$temp" ]
    then
        echo $1 | sed -re 's/(^.*'$2')(.*)/\1/I'
    fi
}
# Print the current Path
function print_curr_path_dir()
{
    find_dir_in_path $(pwd) $1
}

# ff
function ff() 
{ 
    txtbld
    txtund
    echo "find . -type f -iname '*'$*'*' -ls"
    txtrst
    txtblue
    find . -type f -iname '*'$*'*' -ls
    txtbld
    txtund
    echo "END RESULTS"
    txtrst
}

#list files which contain the following name in current directory and sub
function ffw() 
{ 
    txtbld
    txtund
    echo "find . -type f -iname $1 -ls"
    txtrst
    txtblue
    find . -type f -iname $1 -ls
    txtbld
    txtund
    echo "END RESULTS"
    txtrst
}


function ffp4() 
{ 
    txtbld
    txtund
    echo "find . -type f -iname '*'$*'*' -ls"
    txtrst
    txtblue
    find . -type f -iname '*'$*'*' | xargs p4 filelog -m 1
    txtbld
    txtund
    echo "END RESULTS"
    txtrst
}

function ffwp4() 
{ 
    txtbld
    txtund
    echo "find . -type f -iname $1 -ls"
    txtrst
    txtblue
    find . -type f -iname $1 | xargs p4 filelog  -s -m 1
    txtbld
    txtund
    echo "END RESULTS"
    txtrst
}
#list folders which contain the following name in this directory and its sub
function ffr() 
{ 
    find . -type d -iname '*'$*'*' -ls ; 
}

#open file and also cd to that directory
function openfile_godir()
{
    PS3="Type a number or 'q' to quit:"
    fileList=$(find . -type f -iname '*'$*'*')
    txtblue
    select fileName in $fileList; do
        if [ -n "$fileName" ]; then
            local derivedpath=$(dirname ${fileName})
            cd $derivedpath
            local derivedpath=$(dirname ${fileName})
            local derived_file_name=$(basename ${fileName})
            cd $derivedpath
            vim $derived_file_name
        fi
        break
    done
    txtrst
}

#only open file and do not cd to that directory
function openfile()
{
    echo "openfile '$'"
    PS3="Type a number or 'q' to quit:"
    fileList=$(find . -type f -iname '*'$2'*')
    txtblue
    select fileName in $fileList; do
        if [ -n "$fileName" ]; 
        then
            if [ -z "$3" ]; then
                $1 ${fileName}
            else 
                $1 +$3 ${fileName}
            local derivedpath=$(dirname ${fileName})
            cd $derivedpath
            fi
        fi
        break
    done
    txtrst
}


function openfile_gvimr()
{
    PS3="Type a number or 'q' to quit:"
    fileList=$(find . -type f -iname '*'$*'*')
    txtblue
    select fileName in $fileList; do
        if [ -n "$fileName" ]; then
            gvimr ${fileName}
        fi
        break
    done
    txtrst
}
#goto directory of this file
function gofile()
{
    PS3="Type a number or 'q' to quit:"
    txtbld
    txtund
    fileList=$(find . -type f -iname '*'$*'*')
    txtrst
    txtblue
    select fileName in $fileList; do
        if [ -n "$fileName" ]; then
            local derivedpath=$(dirname ${fileName})
            cd $derivedpath
        fi
        break
    done
    txtrst
}

#goto this directory
function godir()
{
    PS3="Type a number or 'q' to quit:"
    txtbld
    txtund
    echo "find . -type d -iname '*'$*'*'"
    txtrst
    folderList=$(find . -type d -iname '*'$*'*')
    txtblue
    select folderName in $folderList; do
        if [ -n "$folderName" ]; then
            cd ${folderName}
        fi
        break
    done
    txtrst
}


function godirw()
{
    PS3="Type a number or 'q' to quit:"
    txtbld
    txtund
    echo "find . -type d -iname $*"
    txtrst
    folderList=$(find . -type d -iname $*)
    txtblue
    select folderName in $folderList; do
        if [ -n "$folderName" ]; then
            cd ${folderName}
        fi
        break
    done
    txtrst
}
# find this text in the file
function findinfile()
{
    txtbld
    txtund
    txtred
    echo  "find . -type f -iname '*'$2'*' -print | xargs grep $1 $3"
    txtrst
    txtblue
    find . -type f -iname '*'$2'*' -print | xargs grep $1 "$3"
    txtrst
    txtred
    echo "RESULTS END"
    txtrst
}

function findinfile_ext()
{
    txtbld
    txtund
    txtred
    echo  "find . -type f -iname '*'$2 -print | xargs grep $1 $3"
    txtrst
    txtblue
    find . -type f -iname '*'$2 -print | xargs grep $1 "$3"
    txtrst
    txtred
    echo "RESULTS END"
    txtrst
}
#dont know
function listinfile()
{
    
   PS3="Type a number or 'q' to quit:"
   echo "find . -type f -iname '*'$1'*' -print | xargs grep -i $2 "
   fileList=$(find . -type f -iname '*'$1'*' -print | xargs grep -i $2 )
   fileList_final=$($fileList | sed -re 's/(^.*':')(.*)/\1/I') 
   select fileName in $fileList_final; do     
        if [ -n "$fileName" ]; then
            vim ${fileName}
        fi
        break
   done
}

function selectdirectory()
{
    printf "Please select folder:\n"
    select d in */; do test -n "$d" && break; echo ">>> Invalid Selection"; done
    cd "$d" && pwd
}

function set-title() {
  if [[ -z "$ORIG" ]]; then
    ORIG=$PS1
  fi
  TITLE="\[\e]2;$@\a\]"
  PS1=${ORIG}${TITLE}
}
